// Hail Diffrential Reflectivity as described by Aydin, K., Seliga, T. A., & Balaji, V. (1986)
// Made by James Hyde - Twitter: @wxmeddler for use in Gibson Ridge Software Version 3
// Any question/comments can be sent to wxmeddler@gmail.com or DM on twitter.
// This Gibson Ridge v3 Color Table by James Hyde is licensed under CC BY-NC-SA 4.0. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
// Please refrain from removing these comments :)

//******************************************************************************

Product
{
  Name = "HDR" // Name as it will appear in GR2AE3
  
  Category
   {
	Missing = -10	// Absolute lowest value possible
	Minimum = -10	// category minimum value
	Maximum = 50	// category maximum value
	Units = "dB"
	
    ColorTable		// color table for HDR category
     {
      Units    = "dB"
      Step     = 5
	
	  Color[10] = solid(rgb(50,255,50))		// green 10 to 15 - Non-Severe Hail
	  Color[15] = solid(rgb(255,255,0))		// yellow 15 to 20 - Low Confidence Severe Hail
	  Color[20] = solid(rgb(255,200,50))	// orange 20 to 25 - Severe Hail Start
	  Color[25] = solid(rgb(255,0,0))		// red 25 to 30 - High Confidence in Severe Hail
	  Color[30] = solid(rgb(0,0,255))		// blue 30 to 35 - Large Hail OR Severe Wet Hail
	  Color[35] = solid(rgb(125,0,255))		// purple 35 to 40 - Chonker Hail
	  Color[40] = solid(rgb(250,75,195))	// hot pink 40 to 45 - OH LAWD HAIL COMIN
	  Color[45] = rgb(250,75,195)
     }
   }
  min_br_required = 20 // Code does not execute for bins below 20 dbz
  resolution = standard 
 }

//******************************************************************************

Program{
 float br; // declare variables
 float zdr;
 float fzdr;
 
 // Start values at zero

 
 Curve fzdr_curve = 	// declare piecewise linear curve for zdr to fzdr
	{
	{0.00,27},	// when zdr <= 0.00, output 27
	{1.74,60}	// when zdr < 1.74, linearly interpolate from 27 to 60
	};
 

br = BRfromHGT(constants.hgt_lowest);	//Take the reflectivity of the lowest scan
zdr = ZDRfromHGT(constants.hgt_lowest); //Take the ZDR of the lowest scan
fzdr = fzdr_curve[zdr];	//Apply the fzdr curve to zdr and assign it to fzdr
 
 return br - fzdr;  //Liquid HDR Output
 }
