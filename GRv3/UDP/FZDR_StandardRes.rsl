// Made by James Hyde - Twitter: @wxmeddler for use in Gibson Ridge Software Version 3
// Any question/comments can be sent to wxmeddler@gmail.com or DM on twitter.
// This Gibson Ridge v3 Color Table by James Hyde is licensed under CC BY-NC-SA 4.0. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
// Please refrain from removing these comments :)
//***********************************************************
// FZDR allows the user to make their own custom temperature based itteratve layer average for ZDR for ZDR Collumn detection and study.
// The default is -5c to -15C.
// Uses the users ZDR color table by default
//***********************************************************
Product
 {
  Name     = "FZDR"
  Category = "ZDR"
  min_br_required = 30 // Code does not execute for bins below 30 dbz
  Resolution = standard // High Resolution 1km x 1km
 }
 //**********************************************************
Program
 {
  float tot_zdr; // Totalizer
  float count; // Enumerator Counter  
  float avg_zdr; // For Returning Average
  float warmestdegC; // Placeholder for warmest level
  float coldestdegC; // Placeholder for coldest level
  float bottomhgt; // Placeholder for lowest itteration level
  float tophgt; // Placeholder for highest itteration level
  
  warmestdegC = -5; // *INSERT YOUR CUSTOM WARMEST TEMPERATURE VALUE HERE (IN DEG C)*
  coldestdegC = -15; // *INSERT YOUR CUSTOM COLDEST TEMPERATURE VALUE HERE (IN DEG C)*
  
  tot_zdr = 0; // Start at zero
  avg_zdr = 0; // Start at zero
  count = 0; // Start at zero
  
  bottomhgt = HGTfromTEMP(warmestdegC);
  tophgt = HGTfromTEMP(coldestdegC);


  enumerate levels from bottomhgt to tophgt //Enumerate all levels from bottom height to top height
   {if( CCfromHGT( level.height ) > 0.70 ) // Only run the zdr totalizer on the CC from level is > 70%.
	 {tot_zdr = ( tot_zdr + ZDRfromHGT( level.height ) ); // totalizer
	 count = count + 1; //running counter
	 }
	}
  
  avg_zdr=tot_zdr/count; // Averager
  
  return avg_zdr; // Return the average for display
 }
