#!/usr/bin/env python
# coding: utf-8

# In[ ]:

import datetime
import pandas as pd

#Setting up inputs
print('To use this script, go to https://www.spotternetwork.org/positions/history, login, and download your positions.\n' +
     'Note: pandas must be installed / in evironment to run this script.')
positionsloc = input('Enter the path to the positions text file you downloaded:')

#Setting up outputs
with open("SNPosHistPlacefile.txt", "a") as fout:

    
    #Reading Positions CSV file
    df = pd.read_csv(positionsloc, index_col=False)

    #Placefile Header
    fout.write(
        ';This placefile was generated by a python script by James Hyde (wxmeddler@gmail.com), '+
        'originally found at https://github.com/wxmeddler/ \n' +
        'Refresh: 60\n' + 
        'Threshold: 999\n' + 
        'Title: SN Historical Positions\n' +
        'Font: 1, 11, 0,"Courier New"\n'+
        'IconFile: 1, 22, 22, 11, 11, "http://www.spotternetwork.org/icon/spotternet_new.png"\n' +
        'IconFile: 2, 15, 25, 8, 25, "http://www.spotternetwork.org/icon/arrows.png"\n\n')

    #Itterate through csv file to generate locations
    for index in range(len(df)):
    
        #TimeStuff
        currdt = str(df.loc[index,'report_at']) #Take DateTime from CSV
        currdt = datetime.datetime.strptime(currdt,"%Y-%m-%d %H:%M:%S") #Turn it into datetime format
    
        try: #This handles if the the next row doesn't exist for the ending datetime.
            nextdt = str(df.loc[index+1,'report_at']) #Take the next row's DateTime from CSV
            nextdt = datetime.datetime.strptime(nextdt,"%Y-%m-%d %H:%M:%S") #Turn it into datetime format
            tcollavd = datetime.timedelta(seconds = 1) #Make a time delta of 1 second
            nextdt = nextdt - tcollavd #We don't want 2 dots at same time, this avoids time collision.
        except: #If there is no next row
            tbump = datetime.timedelta(minutes=5) # 5 minutes ahead
            nextdt = currdt + tbump #make the next time the current report time plus tbump
    
        #Object Lat/Lon ; takes and prints the current index / row lat and lon.
        fout.write('Object: '+ str(df.loc[index,'lat']) + ',' + str(df.loc[index,'lon'])+'\n')
    
        #Timerange ; Spits out the time and next time in iso format
        fout.write('Timerange: '+ str(currdt.isoformat()) +'Z '+ str(nextdt.isoformat())+'Z'+'\n') 
    
        #If not moving, 0 mph, then don't need direction arrow.
        if df.loc[index,'mph'] == 0:
            pass #if we're going zero mph, pass down to next section
        else: #If there is a speed, assign a direction arrow.
            fout.write('Icon: 0,0,'+ str(df.loc[index,'dir']) +',2,15,'+'\n')
        
       #Hover Over Icon Text
        fout.write('Icon: 0,0,000,1,2,"Position Time: '+ str(currdt) +' UTC\\n'+ 
          'Heading:'+ str(df.loc[index,'dir']) +' deg.\\n'
          'Speed:'+ str(round(df.loc[index,'mph'])) +' mph" \n')
    
        fout.write('End:'+'\n\n') #End
fout.close()
print('Done! Your Placefile is now in the same folder as this .py file called SNPosHistPlacefile.txt')
